/**
 * Parser for MARC records
 *
 * This project is based on the File_MARC package
 * (http://pear.php.net/package/File_MARC) by Dan Scott , which was based on PHP
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;
using System.IO;

namespace MARC
{
    /// <summary>
    /// This is a wrapper for FileMARC that allows for reading large files without loading the entire file into memory.
    /// </summary>
    public class FileMARCReader : IEnumerable, IDisposable
    {
        //Member Variables and Properties
        #region Member Variables and Properties

        private string filename = null;
        private FileStream reader = null;

        #endregion

        //Constructors
        #region Constructors

        public FileMARCReader(string filename)
        {
            this.filename = filename;
            reader = new FileStream(this.filename, FileMode.Open, FileAccess.Read, FileShare.Read);
        }

        #endregion

        //Interface functions
        #region IEnumerator Members

        /// <summary>
        /// Gets the enumerator.
        /// </summary>
        /// <returns></returns>
        public IEnumerator GetEnumerator()
        {
            int bufferSize = 10 * 1024 * 1024;
            byte[] ByteArray = new byte[bufferSize + 1];
            while (reader.Position < reader.Length)
            {
                int DelPosition, RealReadSize;
                do
                {
                    RealReadSize = reader.Read(ByteArray, 0, bufferSize);

                    if (RealReadSize != bufferSize)
                        Array.Resize(ref ByteArray, RealReadSize + 1);

                    DelPosition = Array.LastIndexOf(ByteArray, Convert.ToByte(FileMARC.END_OF_RECORD)) + 1;

                    if (DelPosition == 0 & RealReadSize == bufferSize)
                    {
                        bufferSize *= 2;
                        ByteArray = new byte[bufferSize + 1];
                    }
                } while (DelPosition == 0 & RealReadSize == bufferSize);

                reader.Position = reader.Position - (RealReadSize - DelPosition);

                FileMARC marc = new FileMARC(Encoding.GetEncoding(1251).GetString(ByteArray, 0, DelPosition));
                foreach (Record marcRecord in marc)
                {
                    yield return marcRecord;
                }
            }
        }

        #endregion

        #region IDisposable Members

        public void Dispose()
        {
            reader.Dispose();
        }

        #endregion
    }
}

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TagExtract.Repository
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    
    
    [System.Data.Linq.Mapping.DatabaseAttribute(Name="Repository")]
    public partial class RepositoryDataContext : System.Data.Linq.DataContext
    {
        
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
        
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSourceFile(SourceFile instance);
    partial void UpdateSourceFile(SourceFile instance);
    partial void DeleteSourceFile(SourceFile instance);
    partial void InsertSourceFileTag(SourceFileTag instance);
    partial void UpdateSourceFileTag(SourceFileTag instance);
    partial void DeleteSourceFileTag(SourceFileTag instance);
    partial void InsertTagBinary(TagBinary instance);
    partial void UpdateTagBinary(TagBinary instance);
    partial void DeleteTagBinary(TagBinary instance);
    partial void InsertTagFullText(TagFullText instance);
    partial void UpdateTagFullText(TagFullText instance);
    partial void DeleteTagFullText(TagFullText instance);
    partial void InsertTagPicture(TagPicture instance);
    partial void UpdateTagPicture(TagPicture instance);
    partial void DeleteTagPicture(TagPicture instance);
    partial void InsertTagText(TagText instance);
    partial void UpdateTagText(TagText instance);
    partial void DeleteTagText(TagText instance);
    #endregion
        
        public RepositoryDataContext(string connection) : 
                base(connection, mappingSource)
        {
            OnCreated();
        }
        
        public RepositoryDataContext(System.Data.IDbConnection connection) : 
                base(connection, mappingSource)
        {
            OnCreated();
        }
        
        public RepositoryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
                base(connection, mappingSource)
        {
            OnCreated();
        }
        
        public RepositoryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
                base(connection, mappingSource)
        {
            OnCreated();
        }
        
        public System.Data.Linq.Table<SourceFile> SourceFile
        {
            get
            {
                return this.GetTable<SourceFile>();
            }
        }
        
        public System.Data.Linq.Table<SourceFileTag> SourceFileTag
        {
            get
            {
                return this.GetTable<SourceFileTag>();
            }
        }
        
        public System.Data.Linq.Table<TagBinary> TagBinary
        {
            get
            {
                return this.GetTable<TagBinary>();
            }
        }
        
        public System.Data.Linq.Table<TagFullText> TagFullText
        {
            get
            {
                return this.GetTable<TagFullText>();
            }
        }
        
        public System.Data.Linq.Table<TagPicture> TagPicture
        {
            get
            {
                return this.GetTable<TagPicture>();
            }
        }
        
        public System.Data.Linq.Table<TagText> TagText
        {
            get
            {
                return this.GetTable<TagText>();
            }
        }
    }
    
    [Table()]
    public partial class SourceFile : INotifyPropertyChanging, INotifyPropertyChanged
    {
        
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        
        private int _FileId;
        
        private string _FileName;
        
        private string _FilePath;
        
        private EntitySet<SourceFileTag> _SourceFileTag;
        
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIdChanging(int value);
    partial void OnFileIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    #endregion
        
        public SourceFile()
        {
            this._SourceFileTag = new EntitySet<SourceFileTag>(new Action<SourceFileTag>(this.attach_SourceFileTag), new Action<SourceFileTag>(this.detach_SourceFileTag));
            OnCreated();
        }
        
        [Column(Storage="_FileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
        public int FileId
        {
            get
            {
                return this._FileId;
            }
            set
            {
                if ((this._FileId != value))
                {
                    this.OnFileIdChanging(value);
                    this.SendPropertyChanging();
                    this._FileId = value;
                    this.SendPropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }
        
        [Column(Storage="_FileName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
        public string FileName
        {
            get
            {
                return this._FileName;
            }
            set
            {
                if ((this._FileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.SendPropertyChanging();
                    this._FileName = value;
                    this.SendPropertyChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        [Column(Storage="_FilePath", DbType="NVarChar(256)")]
        public string FilePath
        {
            get
            {
                return this._FilePath;
            }
            set
            {
                if ((this._FilePath != value))
                {
                    this.OnFilePathChanging(value);
                    this.SendPropertyChanging();
                    this._FilePath = value;
                    this.SendPropertyChanged("FilePath");
                    this.OnFilePathChanged();
                }
            }
        }
        
        [Association(Name="FK_SourceFileTag_SourceFile", Storage="_SourceFileTag", ThisKey="FileId", OtherKey="FileId", DeleteRule="CASCADE")]
        public EntitySet<SourceFileTag> SourceFileTag
        {
            get
            {
                return this._SourceFileTag;
            }
            set
            {
                this._SourceFileTag.Assign(value);
            }
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        
        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        private void attach_SourceFileTag(SourceFileTag entity)
        {
            this.SendPropertyChanging();
            entity.SourceFile = this;
        }
        
        private void detach_SourceFileTag(SourceFileTag entity)
        {
            this.SendPropertyChanging();
            entity.SourceFile = null;
        }
    }
    
    [Table()]
    public partial class SourceFileTag : INotifyPropertyChanging, INotifyPropertyChanged
    {
        
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        
        private int _TagId;
        
        private int _FileId;
        
        private string _Tag;
        
        private EntityRef<SourceFile> _SourceFile;
        
        private EntityRef<TagBinary> _TagBinary;
        
        private EntityRef<TagFullText> _TagFullText;
        
        private EntityRef<TagPicture> _TagPicture;
        
        private EntityRef<TagText> _TagText;
        
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnFileIdChanging(int value);
    partial void OnFileIdChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    #endregion
        
        public SourceFileTag()
        {
            this._SourceFile = default(EntityRef<SourceFile>);
            this._TagBinary = default(EntityRef<TagBinary>);
            this._TagFullText = default(EntityRef<TagFullText>);
            this._TagPicture = default(EntityRef<TagPicture>);
            this._TagText = default(EntityRef<TagText>);
            OnCreated();
        }
        
        [Column(Storage="_TagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }
            set
            {
                if ((this._TagId != value))
                {
                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }
        
        [Column(Storage="_FileId", DbType="Int NOT NULL")]
        public int FileId
        {
            get
            {
                return this._FileId;
            }
            set
            {
                if ((this._FileId != value))
                {
                    if (this._SourceFile.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFileIdChanging(value);
                    this.SendPropertyChanging();
                    this._FileId = value;
                    this.SendPropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }
        
        [Column(Storage="_Tag", DbType="NChar(4) NOT NULL", CanBeNull=false)]
        public string Tag
        {
            get
            {
                return this._Tag;
            }
            set
            {
                if ((this._Tag != value))
                {
                    this.OnTagChanging(value);
                    this.SendPropertyChanging();
                    this._Tag = value;
                    this.SendPropertyChanged("Tag");
                    this.OnTagChanged();
                }
            }
        }
        
        [Association(Name="FK_SourceFileTag_SourceFile", Storage="_SourceFile", ThisKey="FileId", OtherKey="FileId", IsForeignKey=true, DeleteOnNull=true)]
        public SourceFile SourceFile
        {
            get
            {
                return this._SourceFile.Entity;
            }
            set
            {
                SourceFile previousValue = this._SourceFile.Entity;
                if (((previousValue != value) 
                            || (this._SourceFile.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFile.Entity = null;
                        previousValue.SourceFileTag.Remove(this);
                    }
                    this._SourceFile.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag.Add(this);
                        this._FileId = value.FileId;
                    }
                    else
                    {
                        this._FileId = default(int);
                    }
                    this.SendPropertyChanged("SourceFile");
                }
            }
        }
        
        [Association(Name="FK_TagBinary_SourceFileTag", Storage="_TagBinary", ThisKey="TagId", OtherKey="TagId", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
        public TagBinary TagBinary
        {
            get
            {
                return this._TagBinary.Entity;
            }
            set
            {
                TagBinary previousValue = this._TagBinary.Entity;
                if (((previousValue != value) 
                            || (this._TagBinary.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._TagBinary.Entity = null;
                        previousValue.SourceFileTag = null;
                    }
                    this._TagBinary.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag = this;
                    }
                    this.SendPropertyChanged("TagBinary");
                }
            }
        }
        
        [Association(Name="FK_TagFullText_SourceFileTag", Storage="_TagFullText", ThisKey="TagId", OtherKey="TagId", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
        public TagFullText TagFullText
        {
            get
            {
                return this._TagFullText.Entity;
            }
            set
            {
                TagFullText previousValue = this._TagFullText.Entity;
                if (((previousValue != value) 
                            || (this._TagFullText.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._TagFullText.Entity = null;
                        previousValue.SourceFileTag = null;
                    }
                    this._TagFullText.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag = this;
                    }
                    this.SendPropertyChanged("TagFullText");
                }
            }
        }
        
        [Association(Name="FK_TagPicture_SourceFileTag", Storage="_TagPicture", ThisKey="TagId", OtherKey="TagId", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
        public TagPicture TagPicture
        {
            get
            {
                return this._TagPicture.Entity;
            }
            set
            {
                TagPicture previousValue = this._TagPicture.Entity;
                if (((previousValue != value) 
                            || (this._TagPicture.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._TagPicture.Entity = null;
                        previousValue.SourceFileTag = null;
                    }
                    this._TagPicture.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag = this;
                    }
                    this.SendPropertyChanged("TagPicture");
                }
            }
        }
        
        [Association(Name="FK_TagText_SourceFileTag", Storage="_TagText", ThisKey="TagId", OtherKey="TagId", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
        public TagText TagText
        {
            get
            {
                return this._TagText.Entity;
            }
            set
            {
                TagText previousValue = this._TagText.Entity;
                if (((previousValue != value) 
                            || (this._TagText.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._TagText.Entity = null;
                        previousValue.SourceFileTag = null;
                    }
                    this._TagText.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag = this;
                    }
                    this.SendPropertyChanged("TagText");
                }
            }
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        
        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [Table()]
    public partial class TagBinary : INotifyPropertyChanging, INotifyPropertyChanged
    {
        
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        
        private int _TagId;
        
        private short _TextEncodingId;
        
        private string _MimeType;
        
        private string _FileName;
        
        private string _Description;
        
        private System.Data.Linq.Binary _BinaryObject;
        
        private EntityRef<SourceFileTag> _SourceFileTag;
        
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnTextEncodingIdChanging(short value);
    partial void OnTextEncodingIdChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBinaryObjectChanging(System.Data.Linq.Binary value);
    partial void OnBinaryObjectChanged();
    #endregion
        
        public TagBinary()
        {
            this._SourceFileTag = default(EntityRef<SourceFileTag>);
            OnCreated();
        }
        
        [Column(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }
            set
            {
                if ((this._TagId != value))
                {
                    if (this._SourceFileTag.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }
        
        [Column(Storage="_TextEncodingId", DbType="SmallInt NOT NULL")]
        public short TextEncodingId
        {
            get
            {
                return this._TextEncodingId;
            }
            set
            {
                if ((this._TextEncodingId != value))
                {
                    this.OnTextEncodingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TextEncodingId = value;
                    this.SendPropertyChanged("TextEncodingId");
                    this.OnTextEncodingIdChanged();
                }
            }
        }
        
        [Column(Storage="_MimeType", DbType="NVarChar(50)")]
        public string MimeType
        {
            get
            {
                return this._MimeType;
            }
            set
            {
                if ((this._MimeType != value))
                {
                    this.OnMimeTypeChanging(value);
                    this.SendPropertyChanging();
                    this._MimeType = value;
                    this.SendPropertyChanged("MimeType");
                    this.OnMimeTypeChanged();
                }
            }
        }
        
        [Column(Storage="_FileName", DbType="NVarChar(256)")]
        public string FileName
        {
            get
            {
                return this._FileName;
            }
            set
            {
                if ((this._FileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.SendPropertyChanging();
                    this._FileName = value;
                    this.SendPropertyChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        [Column(Storage="_Description", DbType="NVarChar(256)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        [Column(Storage="_BinaryObject", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
        public System.Data.Linq.Binary BinaryObject
        {
            get
            {
                return this._BinaryObject;
            }
            set
            {
                if ((this._BinaryObject != value))
                {
                    this.OnBinaryObjectChanging(value);
                    this.SendPropertyChanging();
                    this._BinaryObject = value;
                    this.SendPropertyChanged("BinaryObject");
                    this.OnBinaryObjectChanged();
                }
            }
        }
        
        [Association(Name="FK_TagBinary_SourceFileTag", Storage="_SourceFileTag", ThisKey="TagId", OtherKey="TagId", IsForeignKey=true, DeleteOnNull=true)]
        public SourceFileTag SourceFileTag
        {
            get
            {
                return this._SourceFileTag.Entity;
            }
            set
            {
                SourceFileTag previousValue = this._SourceFileTag.Entity;
                if (((previousValue != value) 
                            || (this._SourceFileTag.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFileTag.Entity = null;
                        previousValue.TagBinary = null;
                    }
                    this._SourceFileTag.Entity = value;
                    if ((value != null))
                    {
                        value.TagBinary = this;
                        this._TagId = value.TagId;
                    }
                    else
                    {
                        this._TagId = default(int);
                    }
                    this.SendPropertyChanged("SourceFileTag");
                }
            }
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        
        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [Table()]
    public partial class TagFullText : INotifyPropertyChanging, INotifyPropertyChanged
    {
        
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        
        private int _TagId;
        
        private short _TextEncodingId;
        
        private string _TextLanguage;
        
        private string _Description;
        
        private string _Comment;
        
        private EntityRef<SourceFileTag> _SourceFileTag;
        
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnTextEncodingIdChanging(short value);
    partial void OnTextEncodingIdChanged();
    partial void OnTextLanguageChanging(string value);
    partial void OnTextLanguageChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
        
        public TagFullText()
        {
            this._SourceFileTag = default(EntityRef<SourceFileTag>);
            OnCreated();
        }
        
        [Column(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }
            set
            {
                if ((this._TagId != value))
                {
                    if (this._SourceFileTag.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }
        
        [Column(Storage="_TextEncodingId", DbType="SmallInt NOT NULL")]
        public short TextEncodingId
        {
            get
            {
                return this._TextEncodingId;
            }
            set
            {
                if ((this._TextEncodingId != value))
                {
                    this.OnTextEncodingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TextEncodingId = value;
                    this.SendPropertyChanged("TextEncodingId");
                    this.OnTextEncodingIdChanged();
                }
            }
        }
        
        [Column(Storage="_TextLanguage", DbType="NChar(3) NOT NULL", CanBeNull=false)]
        public string TextLanguage
        {
            get
            {
                return this._TextLanguage;
            }
            set
            {
                if ((this._TextLanguage != value))
                {
                    this.OnTextLanguageChanging(value);
                    this.SendPropertyChanging();
                    this._TextLanguage = value;
                    this.SendPropertyChanged("TextLanguage");
                    this.OnTextLanguageChanged();
                }
            }
        }
        
        [Column(Storage="_Description", DbType="NVarChar(256)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        [Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if ((this._Comment != value))
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }
        
        [Association(Name="FK_TagFullText_SourceFileTag", Storage="_SourceFileTag", ThisKey="TagId", OtherKey="TagId", IsForeignKey=true, DeleteOnNull=true)]
        public SourceFileTag SourceFileTag
        {
            get
            {
                return this._SourceFileTag.Entity;
            }
            set
            {
                SourceFileTag previousValue = this._SourceFileTag.Entity;
                if (((previousValue != value) 
                            || (this._SourceFileTag.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFileTag.Entity = null;
                        previousValue.TagFullText = null;
                    }
                    this._SourceFileTag.Entity = value;
                    if ((value != null))
                    {
                        value.TagFullText = this;
                        this._TagId = value.TagId;
                    }
                    else
                    {
                        this._TagId = default(int);
                    }
                    this.SendPropertyChanged("SourceFileTag");
                }
            }
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        
        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [Table()]
    public partial class TagPicture : INotifyPropertyChanging, INotifyPropertyChanged
    {
        
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        
        private int _TagId;
        
        private short _TextEncodingId;
        
        private string _MimeType;
        
        private short _PictureTypeId;
        
        private string _Description;
        
        private System.Data.Linq.Binary _BinaryImage;
        
        private EntityRef<SourceFileTag> _SourceFileTag;
        
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnTextEncodingIdChanging(short value);
    partial void OnTextEncodingIdChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnPictureTypeIdChanging(short value);
    partial void OnPictureTypeIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBinaryImageChanging(System.Data.Linq.Binary value);
    partial void OnBinaryImageChanged();
    #endregion
        
        public TagPicture()
        {
            this._SourceFileTag = default(EntityRef<SourceFileTag>);
            OnCreated();
        }
        
        [Column(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }
            set
            {
                if ((this._TagId != value))
                {
                    if (this._SourceFileTag.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }
        
        [Column(Storage="_TextEncodingId", DbType="SmallInt NOT NULL")]
        public short TextEncodingId
        {
            get
            {
                return this._TextEncodingId;
            }
            set
            {
                if ((this._TextEncodingId != value))
                {
                    this.OnTextEncodingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TextEncodingId = value;
                    this.SendPropertyChanged("TextEncodingId");
                    this.OnTextEncodingIdChanged();
                }
            }
        }
        
        [Column(Storage="_MimeType", DbType="NVarChar(50)")]
        public string MimeType
        {
            get
            {
                return this._MimeType;
            }
            set
            {
                if ((this._MimeType != value))
                {
                    this.OnMimeTypeChanging(value);
                    this.SendPropertyChanging();
                    this._MimeType = value;
                    this.SendPropertyChanged("MimeType");
                    this.OnMimeTypeChanged();
                }
            }
        }
        
        [Column(Storage="_PictureTypeId", DbType="SmallInt NOT NULL")]
        public short PictureTypeId
        {
            get
            {
                return this._PictureTypeId;
            }
            set
            {
                if ((this._PictureTypeId != value))
                {
                    this.OnPictureTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._PictureTypeId = value;
                    this.SendPropertyChanged("PictureTypeId");
                    this.OnPictureTypeIdChanged();
                }
            }
        }
        
        [Column(Storage="_Description", DbType="NVarChar(256)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        [Column(Storage="_BinaryImage", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
        public System.Data.Linq.Binary BinaryImage
        {
            get
            {
                return this._BinaryImage;
            }
            set
            {
                if ((this._BinaryImage != value))
                {
                    this.OnBinaryImageChanging(value);
                    this.SendPropertyChanging();
                    this._BinaryImage = value;
                    this.SendPropertyChanged("BinaryImage");
                    this.OnBinaryImageChanged();
                }
            }
        }
        
        [Association(Name="FK_TagPicture_SourceFileTag", Storage="_SourceFileTag", ThisKey="TagId", OtherKey="TagId", IsForeignKey=true, DeleteOnNull=true)]
        public SourceFileTag SourceFileTag
        {
            get
            {
                return this._SourceFileTag.Entity;
            }
            set
            {
                SourceFileTag previousValue = this._SourceFileTag.Entity;
                if (((previousValue != value) 
                            || (this._SourceFileTag.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFileTag.Entity = null;
                        previousValue.TagPicture = null;
                    }
                    this._SourceFileTag.Entity = value;
                    if ((value != null))
                    {
                        value.TagPicture = this;
                        this._TagId = value.TagId;
                    }
                    else
                    {
                        this._TagId = default(int);
                    }
                    this.SendPropertyChanged("SourceFileTag");
                }
            }
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        
        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [Table()]
    public partial class TagText : INotifyPropertyChanging, INotifyPropertyChanged
    {
        
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        
        private int _TagId;
        
        private short _TextEncodingId;
        
        private string _Description;
        
        private string _Text;
        
        private EntityRef<SourceFileTag> _SourceFileTag;
        
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnTextEncodingIdChanging(short value);
    partial void OnTextEncodingIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
        
        public TagText()
        {
            this._SourceFileTag = default(EntityRef<SourceFileTag>);
            OnCreated();
        }
        
        [Column(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }
            set
            {
                if ((this._TagId != value))
                {
                    if (this._SourceFileTag.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }
        
        [Column(Storage="_TextEncodingId", DbType="SmallInt NOT NULL")]
        public short TextEncodingId
        {
            get
            {
                return this._TextEncodingId;
            }
            set
            {
                if ((this._TextEncodingId != value))
                {
                    this.OnTextEncodingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TextEncodingId = value;
                    this.SendPropertyChanged("TextEncodingId");
                    this.OnTextEncodingIdChanged();
                }
            }
        }
        
        [Column(Storage="_Description", DbType="NVarChar(256)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        [Column(Storage="_Text", DbType="NVarChar(4000)")]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if ((this._Text != value))
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        [Association(Name="FK_TagText_SourceFileTag", Storage="_SourceFileTag", ThisKey="TagId", OtherKey="TagId", IsForeignKey=true, DeleteOnNull=true)]
        public SourceFileTag SourceFileTag
        {
            get
            {
                return this._SourceFileTag.Entity;
            }
            set
            {
                SourceFileTag previousValue = this._SourceFileTag.Entity;
                if (((previousValue != value) 
                            || (this._SourceFileTag.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFileTag.Entity = null;
                        previousValue.TagText = null;
                    }
                    this._SourceFileTag.Entity = value;
                    if ((value != null))
                    {
                        value.TagText = this;
                        this._TagId = value.TagId;
                    }
                    else
                    {
                        this._TagId = default(int);
                    }
                    this.SendPropertyChanged("SourceFileTag");
                }
            }
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        
        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591

/***************************************************************************
Copyright (c) 2008, Thoraxcentrum, Erasmus MC, Rotterdam, The Netherlands

Written by Maarten JB van Ettinger.

****************************************************************************/
#if WINCE
using System;

namespace ECGConversion
{
    /// <summary>
    /// SortedList for .NET Compact.
    /// </summary>
    public class SortedList
    {
        private class ItemHolder
        {
            public ItemHolder(IComparable  k, object o)
            {
                key = k;
                obj = o;
            }

            public IComparable key;
            public object obj;

            public ItemHolder Clone()
            {
                return new ItemHolder(key, obj);
            }
        }

        private static int _AutoResize = 16;
        private ItemHolder[] _Items;
        private int _Count;

        public SortedList()
        {
            _Items = new ItemHolder[_AutoResize];
            _Count = 0;
        }

        public SortedList(SortedList obj)
        {
            _Items = new ItemHolder[obj._Items.Length];
            _Count = obj._Count;

            for (int i=0;i < _Count;i++)
                _Items[i] = obj._Items[i].Clone();
        }

        public void Add(IComparable  key, object obj)
        {
            int index = _IndexOfKey(key);

            if ((index < _Count)
            &&  (key.CompareTo(_Items[index].key) == 0))
            {
                _Items[index].obj = obj;
            }
            else if (_Count == _Items.Length)
            {
                ItemHolder[] items = new ItemHolder[_Items.Length + _AutoResize];

                for (int i=0;i < index;i++)
                    items[i] = _Items[i];

                items[index] = new ItemHolder(key, obj);

                for (;index < _Count;index++)
                    items[index+1] = _Items[index];

                _Items = items;

                _Count++;
            }
            else
            {
                for (int i=_Count-1;i >= index;i--)
                    _Items[i+1] = _Items[i];

                _Items[index] = new ItemHolder(key, obj);

                _Count++;
            }
        }

        public bool ContainsKey(IComparable key)
        {
            int index = _IndexOfKey(key);

            return index < _Count && key.CompareTo(_Items[index].key) == 0;
        }

        public int Count
        {
            get
            {
                return _Count;
            }
        }

        public void Clear()
        {
            for (int i=0;i < _Count;i++)
                _Items[i] = null;

            _Count = 0;
        }

        public object GetByIndex(int index)
        {
            return index >= 0 && index < _Count ? _Items[index].obj : null;
        }

        public IComparable GetKey(int index)
        {
            return index >= 0 && index < _Count ? _Items[index].key : null;
        }

        public int IndexOfKey(IComparable  key)
        {
            int index = _IndexOfKey(key);

            return index < _Count && key.CompareTo(_Items[index].key) == 0 ? index : -1;
        }

        private int _IndexOfKey(IComparable  key)
        {
            int l = 0,
                h = _Count;

            while (l < h)
            {
                int m = (l + h) >> 1;
                int cmp = key.CompareTo(_Items[m].key);

                if (cmp == 0)
                    return m;
                else if (cmp < 0)
                    h = m;
                else
                    l = m + 1;
            }

            return l;
        }

        public void Remove(IComparable  key)
        {
            int index = _IndexOfKey(key);

            if ((index < _Count)
            &&  (key.CompareTo(_Items[index].key) == 0))
                RemoveAt(index);
        }

        public void RemoveAt(int index)
        {
            if ((index >= 0)
            &&  (index < _Count))
            {
                _Count--;

                for (;index < _Count;index++)
                    _Items[index] = _Items[index+1];

                _Items[_Count] = null;
            }
        }

        public void SetByIndex(int index, object obj)
        {
            if ((index >= 0)
            &&  (index < _Count))
                _Items[index].obj = obj;
        }

        public object this[IComparable  key]
        {
            get
            {
                int index = _IndexOfKey(key);

                return index < _Count && key.CompareTo(_Items[index].key) == 0 ? _Items[index].obj : null;
            }
            set
            {
                int index = _IndexOfKey(key);

                if ((index < _Count)
                &&  (key.CompareTo(_Items[index].key) == 0))
                {
                    _Items[index].obj = value;
                }
                else
                {
                    throw new Exception("Key isn't in the list!");
                }
            }
        }

        public object[] Values
        {
            get
            {
                object[] ret = new object[_Count];

                for (int i=0;i < _Count;i++)
                {
                    ret[i] = _Items[i].obj;
                }

                return ret;
            }
        }
    }
}
#endif

using System;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Package Name")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Company")]
[assembly: AssemblyProduct("Package Name")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
[assembly: ComVisible(false)]
[assembly: CLSCompliant(false)]
[assembly: NeutralResourcesLanguage("en-US")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Cosmos.Sys.FileSystem;

namespace Cosmos.Sys.FileSystem.FAT32
{
    public abstract class BootSector
    {
        protected Partition p;
        protected byte[] Sector;

        public BootSector(Partition p)
        {
            this.p = p;
            Sector = new byte[p.BlockSize];
        }

        public byte jmpBoot0
        {
            get
            {
                return Sector[0];
            }
            set
            {
                Sector[0] = value;
            }
        }
        public byte jmpBoot1
        {
            get
            {
                return Sector[1];
            }
            set
            {
                Sector[1] = value;
            }
        }
        public byte jmpBoot2
        {
            get
            {
                return Sector[2];
            }
            set
            {
                Sector[2] = value;
            }
        }
        public byte[] OEMName
        {
            get
            {
                return GetBytes(3, 8);
            }
            set
            {
                SetBytes(value, 3, 8);
            }

        }
        public ushort BytesPerSec
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 11);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 11);
            }
        }
        public byte SectorsPerCluster
        {
            get
            {
                return Sector[13];
            }
            set
            {
                Sector[13] = value;
            }
        }
        public ushort ReservedSectorCount
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 14);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 14);
            }
        }
        public byte NumberFATs
        {
            get
            {
                return Sector[16];
            }
            set
            {
                Sector[16] = value;
            }
        }
        public ushort RootEntryCount
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 17);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 27);
            }
        }
        public ushort TotalSectors16
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 19);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 19);
            }
        }
        public byte Media
        {
            get
            {
                return Sector[21];
            }
            set { Sector[21] = value; }
        }
        public ushort FATsz16
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 22);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 22);
            }
        }
        public ushort SectorsPerTrack
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 24);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 24);
            }
        }
        public ushort NumberOfHeads
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 26);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 26);
            }
        }
        public uint HiddenSectors
        {
            get
            {
                return BitConverter.ToUInt32(Sector, 28);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 28);
            }
        }
        public uint TotalSectors32
        {
            get
            {
                return BitConverter.ToUInt32(Sector, 32);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 32);
            }
        }
        public ushort Signature
        {
            get
            {
                return BitConverter.ToUInt16(Sector, Sector.Length-2);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), (uint)Sector.Length - 2);
            }
        }

        public abstract byte DriveNumber
        {
            get;
            set;
        }
        public abstract byte Reserved1
        {
            get;
            set;
        }
        public abstract byte BootSig
        {
            get;
            set;
        }
        public abstract byte[] VolId
        {
            get;
            set;
        }
        public abstract byte[] VolLab
        {
            get;
            set;
        }
        public abstract byte[] filSysType
        {
            get;
            set;
        }

        protected void SetBytes(byte[] b, uint offset)
        {
            Array.Copy(b, 0, Sector, offset, b.Length);
        }
        protected void SetBytes(byte[] b, uint offset, uint length)
        {
            if (b.Length != length)
            {
                byte[] t = new byte[length];
                Array.Copy(b, t, 0);
                b = t;
            }
            Array.Copy(b, 0, Sector, offset, length);
        }
        protected byte[] GetBytes(uint offset, uint length)
        {
            byte[] t = new byte[length];
            Array.Copy(Sector, offset, t, 0, length);
            return t;
        }

        public void Refresh()
        {
            p.ReadBlock(0, Sector);
        }
        public void Save()
        {
            p.WriteBlock(0, Sector);
        }
    }
    public class BootSectorFAT12 : BootSector
    {
        public BootSectorFAT12(Partition p) : base(p) { }
        public override byte DriveNumber
        {
            get
            {
                return Sector[36];
            }
            set
            {
                Sector[36] = value;
            }
        }
        public override byte Reserved1
        {
            get
            {
                return Sector[37];
            }
            set
            {
                Sector[37] = value;
            }
        }
        public override byte BootSig
        {
            get
            {
                return Sector[38];
            }
            set
            {
                Sector[38] = value;
            }
        }
        public override byte[] VolId
        {
            get
            {
                return GetBytes(39, 4);
            }
            set
            {
                SetBytes(value, 39, 4);
            }
        }
        public override byte[] VolLab
        {
            get
            {
                return GetBytes(43, 11);
            }
            set
            {
                SetBytes(value, 43, 11);
            }
        }
        public override byte[] filSysType
        {
            get
            {
                return GetBytes(54, 8);
            }
            set
            {
                SetBytes(value, 54, 8);
            }
        }
    }
    public class BootSectorFAT16 : BootSectorFAT12
    {
        public BootSectorFAT16(Partition p) : base(p) { }
    }
    public class BootSectorFAT32 : BootSector
    {
        public BootSectorFAT32(Partition p) : base(p) { }
        public uint BPB_FATSz32
        {
            get
            {
                return BitConverter.ToUInt32(Sector, 36);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 36);
            }
        }
        public ushort BPB_ExtFlags
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 40);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 40);
            }
        }
        public ushort BPB_FSVer
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 42);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 42);
            }
        }
        public uint BPB_RootClus
        {
            get
            {
                return BitConverter.ToUInt32(Sector, 44);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 44);
            }
        }
        public ushort BPB_FSInfo
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 48);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 48);
            }
        }
        public ushort BPB_BkBootSec
        {
            get
            {
                return BitConverter.ToUInt16(Sector, 50);
            }
            set
            {
                SetBytes(BitConverter.GetBytes(value), 50);
            }
        }
        public byte[] BPB_Reserved
        {
            get
            {
                return GetBytes(52, 12);

            }
            set
            {
                SetBytes(value, 52, 12);
            }
        }
        public override byte DriveNumber
        {
            get
            {
                return Sector[64];
            }
            set
            {
                Sector[64] = value;
            }
        }
        public override byte Reserved1
        {
            get
            {
                return Sector[65];
            }
            set
            {
                Sector[65] = value;
            }
        }
        public override byte BootSig
        {
            get
            {
                return Sector[66];
            }
            set
            {
                Sector[66] = value;
            }
        }
        public override byte[] VolId
        {
            get
            {
                return GetBytes(67, 4);
            }
            set
            {
                SetBytes(value, 67, 4);
            }
        }
        public override byte[] VolLab
        {
            get
            {
                return GetBytes(71, 11);
            }
            set
            {
                SetBytes(value, 71, 11);
            }
        }
        public override byte[] filSysType
        {
            get
            {
                return GetBytes(82, 8);
            }
            set
            {
                SetBytes(value, 82, 8);
            }
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Net;
using System.Net.Sockets;

namespace Cosmos.Deploy.Pixie {
  public class DHCP {
    protected const int ServerPort = 67;
    protected const int ClientPort = 68;
    protected UdpClient mUDP;
    protected string mBootFile;

    protected byte[] mServerIP;
    protected byte[] mClientIP;
    protected IPEndPoint mRecvEndPoint;

    public void Stop() {
      mUDP.Close();
    }

    // Need full path to boot file because it needs to get the size
    public DHCP(byte[] aServerIP, string aBootFile) {
      mServerIP = aServerIP;
      mBootFile = aBootFile;

      mClientIP = (byte[])mServerIP.Clone();
      mClientIP[3] = 2;

      mUDP = new UdpClient(new IPEndPoint(new IPAddress(mServerIP), ServerPort));

      mRecvEndPoint = new IPEndPoint(IPAddress.Any, ServerPort);
    }

    protected DhcpPacket Receive(DhcpPacket.MsgType aWaitFor) {
      while (true) {
        var xData = mUDP.Receive(ref mRecvEndPoint);
        var xPacket = new DhcpPacket(xData);
        if (xPacket.Msg == aWaitFor) {
          return xPacket;
        }
      }
    }

    protected void Send(DhcpPacket aPacket) {
      var xBytes = aPacket.GetBytes();
      mUDP.Send(xBytes, xBytes.Length, new IPEndPoint(IPAddress.Broadcast, 68));
    }

    protected DhcpPacket SendOffer(DhcpPacket aDiscover) {
      var xOut = new DhcpPacket();
      xOut.Op = DhcpPacket.OpType.Reply;
      xOut.TxID = aDiscover.TxID;
      xOut.YourAddr = BitConverter.ToUInt32(mClientIP, 0);
      xOut.ServerAddr = BitConverter.ToUInt32(mServerIP, 0);
      xOut.HwAddr = aDiscover.HwAddr;
      xOut.Flags = aDiscover.Flags;
      xOut.Msg = DhcpPacket.MsgType.Offer;

      xOut.Options.Add(1, new byte[] { 255, 255, 255, 0 });
      xOut.Options.Add(54, mServerIP);
      xOut.AddTextOption(60, "PXEClient");

      xOut.BootFile = Path.GetFileName(mBootFile);
      var xFileInfo = new FileInfo(mBootFile);
      byte xBlockCount = (byte)(xFileInfo.Length / 512);
      xOut.Options.Add(13, new byte[] { 0, xBlockCount });

      Send(xOut);
      return xOut;
    }

    protected DhcpPacket SendAck(DhcpPacket aDiscover, DhcpPacket aRequest) {
      aDiscover.Msg = DhcpPacket.MsgType.Ack;
      Send(aDiscover);
      return aDiscover;
    }

    public event Action<DHCP, string> OnLog;
    protected void DoLog(string aText) {
      if (OnLog != null) {
        OnLog(this, aText);
      }
    }

    public void Execute() {
      DhcpPacket xRequest;
      DhcpPacket xReply;

      xRequest = Receive(DhcpPacket.MsgType.Discover);
      DoLog("Discover received.");

      xReply = SendOffer(xRequest);
      string xClientIP = mClientIP[0] + "." + mClientIP[1] + "." + mClientIP[2] + "." + mClientIP[3];
      DoLog("Offer sent: " + xClientIP);

      // Wait for REQUEST. We need to filter out other DISCOVER that may have been sent
      xRequest = Receive(DhcpPacket.MsgType.Request);
      DoLog("Request received.");

      xReply = SendAck(xReply, xRequest);
      DoLog("Acknowledgement sent.");
    }

  }
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Cosmos.Deploy.Pixie {
  public class DhcpPacket {

    public DhcpPacket() {
    }

    public DhcpPacket(byte[] aData) {
      var xReader = new BinaryReader(new MemoryStream(aData));

      Op = (OpType)xReader.ReadByte();
      if (Op != OpType.Request) {
        throw new Exception("Invalid Op");
      }

      HwType = xReader.ReadByte();
      HwLength = xReader.ReadByte();
      Hops = xReader.ReadByte();

      // Dont worry about byte order, its an atomic number
      TxID = xReader.ReadUInt32();

      //secs    2       filled in by client, seconds elapsed since client started trying to boot.
      xReader.ReadUInt16();
      Flags = xReader.ReadUInt16();

      // Dont reverse IP Addresses, byte arrays end up big endian as we write them back
      ClientAddr = xReader.ReadUInt32();

      // Your Addr
      xReader.ReadUInt32();
      // Server Addr
      xReader.ReadUInt32();
      // Gateway Addr
      xReader.ReadUInt32();

      HwAddr = xReader.ReadBytes(16);

      //sname   64      optional server host name, null terminated string.
      xReader.ReadBytes(64);

      //file    128     boot file name, null terminated string;
      //                'generic' name or null in bootrequest,
      //                fully qualified directory-path
      //                name in bootreply.
      xReader.ReadBytes(128);

      if (xReader.ReadUInt32() != mMagicCookie) {
        throw new Exception("[DHCP] Magic cookie doesn't match.");
      }

      //options     var  Optional parameters field.  See the options
      //                documents for a list of defined options.  
      while (true) {
        byte xOption = xReader.ReadByte();
        if (xOption == 255) {
          break;
        } else if (xOption == 0) {
          continue;
        }

        byte xLength = xReader.ReadByte();
        Options.Add(xOption, xReader.ReadBytes(xLength));
      }

      Msg = (MsgType)Options[53][0];
    }

    public byte[] GetBytes() {
      // See comments in ctor why we dont convert to network byte order
      var xStream = new MemoryStream();
      var xWriter = new BinaryWriter(xStream);

      xWriter.Write((byte)Op);
      xWriter.Write((byte)1);
      xWriter.Write((byte)6);
      xWriter.Write((byte)0);

      xWriter.Write(TxID);
      xWriter.Write((UInt16)0);
      xWriter.Write(Flags);
      xWriter.Write(0);
      xWriter.Write(YourAddr);
      xWriter.Write(ServerAddr);
      xWriter.Write(0);
      xWriter.Write(HwAddr);

      var xBytes1 = ASCIIEncoding.ASCII.GetBytes("none");
      xWriter.Write(xBytes1);
      xWriter.Write(new byte[64 - xBytes1.Length]);

      var xBytes = ASCIIEncoding.ASCII.GetBytes(BootFile);
      xWriter.Write(xBytes);
      xWriter.Write(new byte[128 - xBytes.Length]);

      xWriter.Write(mMagicCookie);

      xWriter.Write((byte)53);
      xWriter.Write((byte)1);
      xWriter.Write((byte)Msg);

      foreach (var xOption in Options) {
        xWriter.Write(xOption.Key);
        xWriter.Write((byte)xOption.Value.Length);
        xWriter.Write(xOption.Value);
      }
      xWriter.Write((byte)255);

      var xResult = xStream.ToArray();
      return xResult;
    }

    public void AddTextOption(byte aID, string aText) {
      var xBytes = Encoding.ASCII.GetBytes(aText);
      var xBytes2 = new byte[xBytes.Length + 1];
      xBytes2[0] = (byte)xBytes.Length;
      xBytes.CopyTo(xBytes2, 1);
      Options.Add(aID, xBytes2);
    }

    protected UInt32 mMagicCookie = 0x63538263;
    public Dictionary<byte, byte[]> Options = new Dictionary<byte, byte[]>();

    public enum MsgType { Discover = 1, Offer, Request, Decline, Ack, Nak, Release };
    public MsgType Msg;

    public enum OpType { Request = 1, Reply }
    public OpType Op;
    public byte HwType;
    public byte HwLength;
    public byte Hops;
    public UInt32 TxID;
    public UInt16 Flags;
    public UInt32 ClientAddr;
    public UInt32 YourAddr;
    public UInt32 ServerAddr;
    public byte[] HwAddr;
    public string BootFile;
  }
}
